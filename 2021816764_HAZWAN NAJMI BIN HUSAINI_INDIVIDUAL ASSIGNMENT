#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX_CHILDREN 10
#define BUFFER_SIZE 1024

void interrupt_handler(int signal) {
    printf("\nInterrupt received. Exiting...\n");
    exit(0);
}

int main() {
    int fd[MAX_CHILDREN][2];
    pid_t child_pid[MAX_CHILDREN];
    int num_children = 0;
    int i;

    // set up interrupt handler
    signal(SIGINT, interrupt_handler);

    // create pipes for each child
    for (i = 0; i < MAX_CHILDREN; i++) {
        if (pipe(fd[i]) == -1) {
            perror("pipe");
            exit(1);
        }
    }

    // create child processes
    while (num_children < MAX_CHILDREN) {
        pid_t pid = fork();
        if (pid == -1) {
            perror("fork");
            exit(1);
        } else if (pid == 0) {
            // child process
            char buffer[BUFFER_SIZE];
            close(fd[num_children][1]); // close write end of pipe
            while (1) {
                int num_bytes = read(fd[num_children][0], buffer, BUFFER_SIZE);
                if (num_bytes == -1) {
                    perror("read");
                    exit(1);
                } else if (num_bytes == 0) {
                    break;
                } else {
                    printf("Child %d received message: %.*s", num_children, num_bytes, buffer);
                }
            }
            close(fd[num_children][0]); // close read end of pipe
            exit(0);
        } else {
            // parent process
            child_pid[num_children] = pid;
            close(fd[num_children][0]); // close read end of pipe
            num_children++;
        }
    }

    // get message from user and send to children
    char message[BUFFER_SIZE];
    printf("Enter a message to send to the children:\n");
    fgets(message, BUFFER_SIZE, stdin);
    for (i = 0; i < num_children; i++) {
        int num_bytes = write(fd[i][1], message, strlen(message));
        if (num_bytes == -1) {
            perror("write");
            exit(1);
        }
    }

    // wait for children to finish
    for (i = 0; i < num_children; i++) {
        int status;
        waitpid(child_pid[i], &status, 0);
        if (WIFEXITED(status)) {
            printf("Child %d exited with status %d\n", i, WEXITSTATUS(status));
        } else if (WIFSIGNALED(status)) {
            printf("Child %d terminated by signal %d\n", i, WTERMSIG(status));
        }
    }

    return 0;
}
